{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "Already_Listed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Amount_Transfer_Not_Performed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Not_Approved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Not_Enough_Provided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Not_Enough_To_Withdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "Not_Listed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Price_Should_Be_Greater_Than_Zero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "You_are_not_owner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "Cancel_Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Item_Bought_OwnerShip_Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Item_Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "Updated_Event",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "CancelList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Listitem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdateList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WithdrawFromAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenid",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb758e0c902a65faf6e97c3055e9da23dbbd45da03ed42dbd49aea6734c0285d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1248604",
    "logsBloom": "0x
    "blockHash": "0x4688b73f3f7f84dfdb9cf39822298547acd48dc9a3a16dd8c874d37ea851b816",
    "transactionHash": "0xcb758e0c902a65faf6e97c3055e9da23dbbd45da03ed42dbd49aea6734c0285d",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1248604",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d80ee25ce85081e105fe6012818b727",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"Already_Listed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Amount_Transfer_Not_Performed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Approved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Enough_Provided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Enough_To_Withdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"Not_Listed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Price_Should_Be_Greater_Than_Zero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"You_are_not_owner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Cancel_Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Item_Bought_OwnerShip_Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Item_Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"Updated_Event\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"CancelList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Listitem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror Price_Should_Be_Greater_Than_Zero();\\r\\nerror Already_Listed(address nftaddress, uint256 tokenid);\\r\\nerror You_are_not_owner();\\r\\nerror Not_Approved();\\r\\nerror Not_Listed(address nftaddress, uint256 tokenid);\\r\\nerror Not_Enough_Provided();\\r\\nerror Not_Enough_To_Withdraw();\\r\\nerror Amount_Transfer_Not_Performed();\\r\\n\\r\\ncontract NftMarketplace is ReentrancyGuard {\\r\\n    event Item_Listed(\\r\\n        address indexed nftaddress,\\r\\n        uint256 indexed tokenid,\\r\\n        uint256 price,\\r\\n        address indexed owner\\r\\n    );\\r\\n    event Item_Bought_OwnerShip_Transfer(\\r\\n        address indexed nftaddress,\\r\\n        address indexed seller,\\r\\n        uint256 indexed tokenid,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event Cancel_Listed(\\r\\n        address indexed nftaddress,\\r\\n        uint256 indexed tokenid,\\r\\n        address indexed seller\\r\\n    );\\r\\n\\r\\n    event Updated_Event(address indexed nftaddress, uint256 indexed tokenid);\\r\\n\\r\\n    struct Listing {\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint256 => Listing)) List_Item;\\r\\n    mapping(address => uint256) seller_earn;\\r\\n\\r\\n    modifier notListed(address nftaddress, uint256 tokenid) {\\r\\n        Listing memory listing = List_Item[nftaddress][tokenid];\\r\\n\\r\\n        if (listing.price > 0) {\\r\\n            revert Already_Listed(nftaddress, tokenid);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(\\r\\n        address nftaddress,\\r\\n        uint256 tokenid,\\r\\n        address spender\\r\\n    ) {\\r\\n        IERC721 nft = IERC721(nftaddress);\\r\\n        address owner = nft.ownerOf(tokenid);\\r\\n        if (owner != spender) {\\r\\n            revert You_are_not_owner();\\r\\n        }\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(address nftaddress, uint256 tokenid) {\\r\\n        Listing memory listing = List_Item[nftaddress][tokenid];\\r\\n        if (listing.price < 0) {\\r\\n            revert Not_Listed(nftaddress, tokenid);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function Listitem(\\r\\n        address nftaddress,\\r\\n        uint256 tokenid,\\r\\n        uint256 price\\r\\n    )\\r\\n        external\\r\\n        isOwner(nftaddress, tokenid, msg.sender)\\r\\n        notListed(nftaddress, tokenid)\\r\\n    {\\r\\n        if (price < 0) {\\r\\n            revert Price_Should_Be_Greater_Than_Zero();\\r\\n        }\\r\\n\\r\\n        IERC721 nft = IERC721(nftaddress);\\r\\n        if (nft.getApproved(tokenid) != address(this)) {\\r\\n            revert Not_Approved();\\r\\n        }\\r\\n\\r\\n        List_Item[nftaddress][tokenid] = Listing(price, msg.sender);\\r\\n\\r\\n        emit Item_Listed(nftaddress, tokenid, price, msg.sender);\\r\\n    }\\r\\n\\r\\n    function buyItem(address nftaddress, uint256 tokenid)\\r\\n        external\\r\\n        payable\\r\\n        isListed(nftaddress, tokenid)\\r\\n        nonReentrant\\r\\n    {\\r\\n        //Check the pricing with sender value\\r\\n        Listing memory listing = List_Item[nftaddress][tokenid];\\r\\n        if (msg.value < listing.price) {\\r\\n            revert Not_Enough_Provided();\\r\\n        }\\r\\n        //IN THIS THERE IS NO TRANSFER OF BALANCE AND ON BEHALF OF THAT WE HAVE PROVIDED THE FUND TO THAT ACCOUNT\\r\\n        seller_earn[listing.seller] += msg.value;\\r\\n        delete (List_Item[nftaddress][tokenid]);\\r\\n        IERC721(nftaddress).safeTransferFrom(\\r\\n            listing.seller,\\r\\n            msg.sender,\\r\\n            tokenid\\r\\n        );\\r\\n        emit Item_Bought_OwnerShip_Transfer(\\r\\n            nftaddress,\\r\\n            listing.seller,\\r\\n            tokenid,\\r\\n            listing.price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function CancelList(address nftaddress, uint256 tokenid)\\r\\n        external\\r\\n        isOwner(nftaddress, tokenid, msg.sender)\\r\\n        isListed(nftaddress, tokenid)\\r\\n    {\\r\\n        delete (List_Item[nftaddress][tokenid]);\\r\\n        emit Cancel_Listed(nftaddress, tokenid, msg.sender);\\r\\n    }\\r\\n\\r\\n    function UpdateList(\\r\\n        address nftaddress,\\r\\n        uint256 tokenid,\\r\\n        uint256 newPrice\\r\\n    ) external isOwner(nftaddress, tokenid, msg.sender) {\\r\\n        List_Item[nftaddress][tokenid].price = newPrice;\\r\\n        emit Updated_Event(nftaddress, tokenid);\\r\\n    }\\r\\n\\r\\n    function WithdrawFromAccount() public {\\r\\n        uint256 amountfromaccount = seller_earn[msg.sender];\\r\\n        if (amountfromaccount <= 0) {\\r\\n            revert Not_Enough_To_Withdraw();\\r\\n        }\\r\\n        //Reentrancy Attack Prevention\\r\\n        seller_earn[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: amountfromaccount}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        if (!success) {\\r\\n            revert Amount_Transfer_Not_Performed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccount() external view returns (uint256) {\\r\\n        return seller_earn[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getListing(address nftaddress, uint256 tokenid)\\r\\n        external\\r\\n        view\\r\\n        returns (Listing memory)\\r\\n    {\\r\\n        return List_Item[nftaddress][tokenid];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd57adbb2474d384a2a53584fa06a250db01e2106d9e2a9bb027211915715743b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550611550806100286000396000f3fe6080604052600436106100705760003560e01c80639f37092a1161004e5780639f37092a146100f2578063a4e322ca1461010e578063db613e8114610137578063fbaed7211461016257610070565b806301d61dfd14610075578063646ccaf21461009e57806388700d1c146100b5575b600080fd5b34801561008157600080fd5b5061009c600480360381019061009791906111fc565b61018b565b005b3480156100aa57600080fd5b506100b361047b565b005b3480156100c157600080fd5b506100dc60048036038101906100d791906111fc565b6105e5565b6040516100e99190611289565b60405180910390f35b61010c600480360381019061010791906111fc565b6106b0565b005b34801561011a57600080fd5b50610135600480360381019061013091906112a4565b610ad5565b005b34801561014357600080fd5b5061014c610f4c565b6040516101599190611306565b60405180910390f35b34801561016e57600080fd5b50610189600480360381019061018491906112a4565b610f93565b005b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101ce9190611306565b60206040518083038186803b1580156101e657600080fd5b505afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190611336565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610285576040517f1e27582c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015110156103925782826040517f628868d5000000000000000000000000000000000000000000000000000000008152600401610389929190611372565b60405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550503373ffffffffffffffffffffffffffffffffffffffff16898b73ffffffffffffffffffffffffffffffffffffffff167f8b150d87303ff5700747ab97b93cef39e1406b0d36c9d243d3a5ab321826d97b60405160405180910390a450505050505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116104f9576040517f8ed01a0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610564906113cc565b60006040518083038185875af1925050503d80600081146105a1576040519150601f19603f3d011682016040523d82523d6000602084013e6105a6565b606091505b50509050806105e1576040517fb8cfd62100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6105ed611133565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015110156107bd5782826040517f628868d50000000000000000000000000000000000000000000000000000000081526004016107b4929190611372565b60405180910390fd5b60026000541415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa9061143e565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610908576040517f38bd40d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095b919061148d565b92505081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b8152600401610a25939291906114e3565b600060405180830381600087803b158015610a3f57600080fd5b505af1158015610a53573d6000803e3d6000fd5b5050505084816020015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f56c8a432ac5dec1eedb95d9f46b4626b747202b2bef8090663f7125e995122238460000151604051610abd9190611306565b60405180910390a45060016000819055505050505050565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610b189190611306565b60206040518083038186803b158015610b3057600080fd5b505afa158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b689190611336565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bcf576040517f1e27582c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511115610cdc5782826040517fca5816f1000000000000000000000000000000000000000000000000000000008152600401610cd3929190611372565b60405180910390fd5b6000891015610d17576040517f0ee89abf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b8152600401610d6c9190611306565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc9190611336565b73ffffffffffffffffffffffffffffffffffffffff1614610e09576040517ff465be8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f63df0ce71a0a5fdb48d1b2abe3abb7a4304f0a9d3b5513ce96e4a42af0e486d08d604051610f369190611306565b60405180910390a4505050505050505050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610fd69190611306565b60206040518083038186803b158015610fee57600080fd5b505afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190611336565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461108d576040517f1e27582c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000181905550868873ffffffffffffffffffffffffffffffffffffffff167fd0eb3e90dd5067bacdd7dca505df8ff6a7ff433d9b3b9e46258fb29d1c03502f60405160405180910390a35050505050505050565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061119382611168565b9050919050565b6111a381611188565b81146111ae57600080fd5b50565b6000813590506111c08161119a565b92915050565b6000819050919050565b6111d9816111c6565b81146111e457600080fd5b50565b6000813590506111f6816111d0565b92915050565b6000806040838503121561121357611212611163565b5b6000611221858286016111b1565b9250506020611232858286016111e7565b9150509250929050565b611245816111c6565b82525050565b61125481611188565b82525050565b604082016000820151611270600085018261123c565b506020820151611283602085018261124b565b50505050565b600060408201905061129e600083018461125a565b92915050565b6000806000606084860312156112bd576112bc611163565b5b60006112cb868287016111b1565b93505060206112dc868287016111e7565b92505060406112ed868287016111e7565b9150509250925092565b611300816111c6565b82525050565b600060208201905061131b60008301846112f7565b92915050565b6000815190506113308161119a565b92915050565b60006020828403121561134c5761134b611163565b5b600061135a84828501611321565b91505092915050565b61136c81611188565b82525050565b60006040820190506113876000830185611363565b61139460208301846112f7565b9392505050565b600081905092915050565b50565b60006113b660008361139b565b91506113c1826113a6565b600082019050919050565b60006113d7826113a9565b9150819050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611428601f836113e1565b9150611433826113f2565b602082019050919050565b600060208201905081810360008301526114578161141b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611498826111c6565b91506114a3836111c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114d8576114d761145e565b5b828201905092915050565b60006060820190506114f86000830186611363565b6115056020830185611363565b61151260408301846112f7565b94935050505056fea26469706673582212202f4787d3f06fa0300180e81ed561f54ad7c2a75ef99bfbe5181bdd5f0228df8364736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 243,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "List_Item",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)236_storage))"
      },
      {
        "astId": 247,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "seller_earn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)236_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)236_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)236_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)236_storage"
      },
      "t_struct(Listing)236_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Listing",
        "members": [
          {
            "astId": 233,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 235,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}